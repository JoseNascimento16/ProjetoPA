Não conseguimos impedir o MODAL de fechar sem usarmos jQuery.

Mas no nosso caso, queremos fazer algumas validações mais robustas no formulário contido no modal e pra isso precisamos enviar as informações para serem processadas pela views.py

Portanto a idéia é a seguinte:

- Ao clicarmos no submit, o modal irá fechar
- As informações serão tratadas na views.py
- Se as informações de validações forem inválidas:
	- setamos uma variável booleana
	- passamos esta variavel para o contexto
	- redirecionamos de volta para a nossa página
	- fazemos um {% if variavel %}
	- colocamos dentro deste if o elemento html do modal com uma classe display:flex ou block
- A página ainda conterá as informações preenchidas no modal antes de termos submetido
- Se já tivermos configurado o clean_field o modal também mostrará onde foi o erro

Ex: na views.py

def ordem(request, ordem_id):
    controle = False <<<<<<<<<<< variavel booleana

    if request.method == 'POST':
        form = CodigosForm(request.POST)
        if form.is_valid():
            # SALVA NO BANCO DE DADOS
            return redirect('entra_na_ordem', ordem_id=id_da_ordem)
        else:
            print('Form inválido')
            controle = True <<<<<<<<<<<<< variavel booleana
            
    dados_a_exibir = {

        'contexto_extra': controle <<<<<<<<<<<< passando a booleana para o contexto
    }
    return render(request, 'ordem.html', dados_a_exibir)

- No html do modal

{% if contexto_extra %}   <<<<<<<<<<<<<<< checando a variável booleana
<div class="modelo-modal" style="display: flex;">     <<<<<<<<<<<< aplicando estilo para que o modal já apareça na renderização
{% else %}
<div class="modelo-modal" >  <<<<<<<<<< se não houve erros no preenchimento do form, o elemento carrega com o estilo normal "display:none" setado no css
{% endif %}

