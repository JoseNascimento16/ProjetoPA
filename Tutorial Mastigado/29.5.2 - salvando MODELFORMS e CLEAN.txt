There 2 situations: using basic Form (forms.Form) and ModelForm (forms.ModelForm).

If you are using a ModelForm then there is no any need of playing with a cleaned_data dictionary because when you do form.save() it is already be matched and the clean data is saved. But you are using basic Form then you have to manually match each cleaned_data to its database place and then save the instance to the database not the form.

- Quando validamos no formulário, o MODELFORMS já pega o conteudo e REMOVE os espaços antes e depois, antes mesmo de validarmos no CLEAN! Por isso que , na validação, recebemos um erro ao tentar validar fields com SOMENTE espaços em branco, porque ele remove os espaços e o objeto vira NONE, e não conseguimos validar um NONE como se ele fosse um whitespace!!!
- Porém utilizando o request.POST, a informação vem sem essa validação (no views). (util somente para caso queiramos INTENCIONALMENTE que hajam esses espaços antes ou depois).
- É por isso que 

Ou seja, se estamos usando ModelForms, não precisamos buscar as informações do formulário na VIEWS. Já podemos simplesmente:

if form.is_valid():
    form.save()

#################################

Outra situação que ocorre é a seguinte: A informação que chega pra agente na VIEWS depende da call.

- se fizermos valor1 = request.POST['valor']
	Essa informação vem direta do campo do formulário SEM VALIDAÇÃO ALGUMA, da exata forma que foi inserida pelo usuario

- se fizermos valor1 = form.cleaned_data.get('first_name'). (Mais util quando estamos usando um formulario(forms.Form)
	É a forma correta de puxar a informação para depois salva-la no banco de dados

- no caso de usarmos ModelForms, nem precisamos puxar as informações como acima, pois o formulario já vem validado pela validation.py, basta fazermos:

	if form.is_valid():
	    form.save()

##################################

No nosso projeto, o modelForm continha FIELDs extras que não estavam no MODELO, e ao tentar salvar com form.save() recebiamos um erro.

Portanto tivemos que salvar o objeto manualmente somente, incluindo no objeto os valores dos campos extras:

instancia_form = form_funcionarios.save(commit=False)

user = User.objects.create_user(
        username=instancia_form.username,
        first_name=instancia_form.first_name,
        last_name=cargo1,
        email='',
        password=instancia_form.password)
user.save()