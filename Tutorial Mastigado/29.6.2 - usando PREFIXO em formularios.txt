Quando preenchemos um formulario, os campos obrigatoriamente possuem um "NOME" e um "VALOR"

Ex: No formulario FORM_A temos o campo identificacao e seu valor:
	
	'identificacao' : valor_inserido_pelo_usuario

Na views.py, ao puxarmos a informação inserida no campo 'identificacao':

	campo_form_a = FORM_A.cleaned_data.get('identificacao')
	
	ou

	conteudo = request.POST['identificacao']

Conseguimos capturar a informação inserida e trabalhar com isso.

Mas imagine se tivermos 2 formularios, como saberemos qual campo IDENTIFICACAO é de cada qual dos formularios?

Para isso podemos usar um prefixo, este prefixo será inserido somente como um marcador antes da palavra identificacao
Podemos inseri-lo tanto no forms.py como um atributo:

	prefix = { 'identificacao' : 'prefixo_qualquer' }

	ou no proprio construtor do form antes de envia-lo para o contexto (melhor opção)

	instancia_form_A = Modelo_do_form(prefix='qualquer')  **note que 'qualquer' também pode ser uma variavel (sem as aspas claro)

E ao puxarmos a informação inserida, no construtor do formulario, podemos dizer qual prefixo do formulario queremos utilizar:

	if request.method == 'POST':
		
#	   instancia_form_A = Modelo_do_form(request.POST, prefix='qualquer')
	   if instancia_form_A.is_valid():
		valor_identificacao = secondform.cleaned_data.get('identificacao')

		ou

##	   conteudo = request.POST['qualquer' + '-identificacao']


em ## perceba que precisamos colocar o prefixo que nós escolhemos, antes da chamada do NOME do campo, o que resultaria em 
	request.POST['qualquer-identificacao']. (ou seja, prefixo-NOME) é assim que o campo NOME vem estruturado quando se coloca um prefixo e 	se puxa usando essa notação.

em # porém, Só precisamos dizer o prefixo no proprio construtor de chamada do request do POST do formulario. Quando chamamos o cleaned_data, 	basta colocar-mos o nome normal do campo.

No proximo tutorial, tempos um exemplo pratico.