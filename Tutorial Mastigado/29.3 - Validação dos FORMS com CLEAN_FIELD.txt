Em Forms.py (validação do input "identificacao")

- Dentro da identação da classe:

class CodigosForm(forms.Form):
	identificacao = forms.CharField(label='Identificação', max_length=1, widget=forms.TextInput(attrs={'placeholder': 'Insira uma letra...'}))
	.
	.
	.

	def clean_identificacao(self):
        	identificacao = self.cleaned_data.get('identificacao')
        	if any(char.isdigit() for char in identificacao):
            		raise forms.ValidationError('Identificação inválida: não inclua números')
        	else:
            		return identificacao

	* A função tem que começar com def clean_...


Na views.py teremos algo parecido com isso:

if request.method == 'POST':
       	form = CodigosForm(request.POST)
        if form.is_valid():
            # SALVA NO BANCO DE DADOS
            return redirect('url_1')
        else:
            print('Form inválido')
            return redirect('url_2')



No Html na seção do formulario


<form class="form-modal" action="#" method="POST"> 
        {% csrf_token %}
        {% for elemento in form_codigos.visible_fields %}
        <div class="linha-input linha-input-codigos">
            <label class="label-input label-input-codigos" for="{{ elemento.id_for_label }}">{{ elemento.label }}</label>
            {{elemento|add_class:'input-input'}}
        </div>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        {% for error in elemento.errors %}
        <section class="alert alert-danger" role="alert"> {{ elemento.errors }} </section>
        {% endfor %}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

        {% endfor %}
            <div class="linha-submit">
                <input class="myButton" type="submit" value="Criar ação">
            </div>
        </form>

Pronto, agora se tentarmos colocar numeros no campo identificacao, receberemos um erro abaixo do input já com um estilo do Bootstrap