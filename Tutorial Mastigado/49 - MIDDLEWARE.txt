Middlewares são parecidos com os signals, porém ativam a partir de outros elementos da aplicação.

No nosso caso, iremos configurar um middleware para verificar se o usuário está autenticado, se não, redireciona-lo para a página de login.

O middleware irá fazer isso analisando TODO e QUALQUER REQUEST na nossa aplicação, então temos que ter cuidado para não cairmos num loop de redirecionamento.

- Vamos criar um arquivo middlewares.py dentro da aplicação principal (pasta SetupPrincipal no nosso caso)

	- pasta_do_projeto > SetupPrincipal > middlewares.py

- em middlewares.py criamos o codigo junto com as importações:

from django.shortcuts import render, redirect
from django.urls import reverse
from django.utils.deprecation import MiddlewareMixin


class AuthRequiredMiddleware(MiddlewareMixin):
    def process_request(self, request):
        if request.user.is_authenticated == False:
            while not (request.path == reverse('fazendo_login')):
                return redirect(reverse('fazendo_login'))


- Agora só precisamos registrar esse middleware em Settings.py:

MIDDLEWARE = [
    .
    .
    .
    'SetupPrincipal.middlewares.AuthRequiredMiddleware',
]

- E pronto, o nosso middleware já deve estar funcionando e analizando todo e qualquer request efetuado na nossa aplicação.