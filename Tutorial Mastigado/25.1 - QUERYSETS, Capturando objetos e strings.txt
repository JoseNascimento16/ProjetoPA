Quando queremos buscar as informações por exemplo, de qual usuário está logado, ou os atributos de uma determinada classe, frequentemente usamos linhas de codigo juntamente com algumas funções built-ins do Django.
(olhar documentação Making queries)

Abaixo, um resumido do que já consegui entender:

1 - usuario = get_object_or_404(User, pk=request.user.id)

	Se printarmos esta variável, o terminal nos retornará o username do objeto "User". Mas não é só isso, se no print solicitarmos o "tipo" desta variável, veremos que na verdade se trata de um "Objeto" completo, e portanto podemos em outras linha solicitar os valores de cada atributo deste objeto. Ex: var = usuario.id ou var = usuario.first_name
	Esta variável "usuario" pode ser jogada diretamente no contexto para puxarmos os valores de seus atributos no HTML. Por ela já ser a classe do objeto direta, podemos chegar no html e buscar os valores diretamente do dicionario: {{ chave_usuario.username }}
	Esta variável NÃO é um iterável, não podemos jogal num FOR no HTML.


2 - plano = Plano_de_acao.objects.filter(pk=24)

	QuerySet. Variável ITERÁVEL. Mesmo tipo do exemplo 4. Conseguimos joga-la num dicionario e mandar para o contexto. Para extrair seus valores temos que fazer um FOR no HTML. A utilidade principal deste formato, é que podemos utilizar este formato iterável dela para passar o ID como parametro para uma URL e tratar numa outra função views que queiramos. Num queryset podemos ter varios objetos.


3 - id_usuario_ativo = request.user.id   OU   usuario_ativo = request.user.username

	Se printarmos esta variável, receberemos os valores referentes, porém, eles são dispostos como "string". O "id" mesmo sendo do tipo str, também pode ser utilizado como int.


4 - contexto_secretaria = Classificacao.objects.filter(tipo_de_acesso='Secretaria').filter(user=id_usuario_ativo)

	Se printarmos esta variável, não teremos muita utilidade do jeito que ela aparece. Mas se printarmos o tipo, veremos que ela é do tipo "Query", ou seja, ela recebe todos os objetos desta classe que se encaixam nos filtros utilizados. Também podemos utilizar esta variável no "contexto", porém no html, ainda precisamos fazer uma varredura com um FOR para extrair/buscar o objeto e o atributo que queremos.


5 - var = Classificacao.objects.get(tipo_de_acesso='Secretaria')

	Se printarmos esta variável veremos que ela é do tipo classe, um "objeto", e portanto também podemos buscar seus atributos, inclusive podemos joga-la no contexto. Porém, esta forma de chamada ela é restritiva, ou seja, só pode haver entre os objetos do modelo Classificacao, somente 1 que satisfaça a condição. Por exemplo, se houverem mais de 1 objeto que satisfaça a condição (tipo_de_acesso='Secretaria') o codigo nos retorna um erro.


6 - planos = Plano_de_acao.objects.filter(~Q(situacao='Pendente')) ou ... .exclude(situacao='Pendente')

	Nesta expressão, o trecho (~Q(situacao='Pendente')) é uma negativa, ou seja, ele filtra excluindo todos os elementos que estiverem com o valor situacao='Pendente'
	Para isso funcionar temos que importar os Q objects
	"from django.db.models import Q"

	Outros exemplos:
		Q(question__startswith='Who') | Q(question__startswith='What')
		Q(question__startswith='Who') & ~Q(pub_date__year=2005)
		Poll.objects.get(Q(question__startswith='Who') , Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)))
		##a virgula depois do Who funciona como um operador AND

		filtered_posts = Post.objects.filter(Q(content__contains=searched) | Q(title__contains=searched))





