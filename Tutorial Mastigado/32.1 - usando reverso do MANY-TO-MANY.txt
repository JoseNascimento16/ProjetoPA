imagine as duas classes:

class Classificacao(models.Model):
    username = models.CharField(max_length=100, unique=True)
    plano_associado = models.ManyToManyField('Plano', blank=True)

class Plano(models.Model):
    name = models.CharField(max_length=255)

- O caminho foward já sabemos:

	classificacao = get_object_or_404(Classificacao, pk=1)
	plano = classificacao.plano_associado.filter(pk=4) (ou podemos fazer um query set para buscar mais planos)

- O caminho reverso tem uma notação especial:

	plano = get_object_or_404(Plano, pk=4)
	classificacoes = plano.classificacao_set.all()

	* dessa forma o django irá nos retornar um queryset de todos os objetos classificacao associado à este plano(pk=4)
	* perceba que 'plano' neste caso precisa ser uma instancia de objeto para que a notação 'classificacao_set' possa funcionar.
	* Se tivermos varios planos dentro de um queryset, podemos usar um FOR e usar a notação para cada plano(elemento)

NO HTML PODEMOS TER ALGO DO TIPO:

	{% for elemento in queryset_de_planos %}
	{% for obj_classif in elemento.classificacao_set.all %}
           {% if obj_classif.username == 'Joao' %}
              <p>- {{obj_classif.username}}</p>
           {% endif %}
        {% endfor %}
        {% endfor %}
	    