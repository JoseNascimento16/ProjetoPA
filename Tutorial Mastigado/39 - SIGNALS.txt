https://www.youtube.com/watch?v=rEX50LJrFuU&ab_channel=CodingEntrepreneurs

https://docs.djangoproject.com/en/4.0/topics/signals/
------------------------------------------------------------------------

O Django inclui um "disseminador de sinal" (SIGNAL) que ajuda apps diferentes a serem notificados quando determinadas ações ocorrem em qualquer lugar que seja do Framework. Em poucas palavras, os signals permitem que emissores notifiquem receptores quando algumas ações acontecem.

1 - No app(usuarios) > apps.py (usaremos como exemplo o app 'usuarios')
   
   Em apps.py: colocamos uma chamada do metodo ready dentro da classe:

	class UsuariosConfig(AppConfig):
    	   name = 'usuarios'

  	   def ready(self):
		import usuarios.signals

2 - No app > __init__.py

   Em __init__.py: declaramos o arquivo acima como de configuração default

	default_app_config = 'usuarios.apps.UsuariosConfig'

3 - No app > criamos um novo arquivo signals.py

   Em signals.py:

	from django.db.models.signals import post_save, pre-save...
	from django.dispatch import receiver
	from .models import Qualquer_Modelo
	from Qualquer_app.models import Qualquer_Modelo

	@receiver(post_save, sender=MyModel)
	def funcao_qualquer(sender, instance, created, *args, **kwargs):
	   print('SIGNAL RECEBIDO')
	   # realizar qualquer ação...

- Ao invez de usar o decorator @receiver, podemos alternativamente também usar:

	post_save.connect(funcao_qualquer, sender=MyModel)