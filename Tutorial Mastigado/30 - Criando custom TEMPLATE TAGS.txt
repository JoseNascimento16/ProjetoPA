As simple tags são muito úteis quando precisamos efetuar um cálculo mais complexo em tempo real na renderização do HTML

Create a template tag:
The app should contain a templatetags directory, at the same level as models.py, views.py, etc. If this doesn’t already exist, create it - don’t forget the __init__.py file to ensure the directory is treated as a Python package.

Create a file named custom_tags.py inside of the templatetags directory with the following code:


from django import template
register = template.Library()

@register.simple_tag
def funcao_exemplo(val=False):
    if val == 1:
       return val

ou 

@register.filter
def tag_any(valor):
    return any(valor)


Note: Development server won’t automatically restart. After adding the templatetags module, you will need to restart your server before you can use the tags or filters in templates.

Then in your template you can assign values to the context like this:

{% load custom_tags %}

  # {% funcao_exemplo "string" as var1 %} ou {% funcao_exemplo variavel as var1 %} ou {% funcao_exemplo variavel %}

ou

{% if values|tag_any %}

# Aqui temos 4 pontos a ressaltar:
   - Qualquer uma das 3 situações, pegam o valor de 'string' ou variavel e calculam na função "funcao_exemplo" no nosso arquivo custom_tags.py. A       funcao_exemplo por sua vez irá retornar um valor específico que pode ser usado no html(no caso se val=1 retorna TRUE, senão retorna False.
   - perceba que "string" e variavel estão em notação correspondente aos seus type(), portanto a "string" irá enviar um valor do tipo string para      a função; e variavel irá enviar uma variável(que pode ser também um objeto ou queryset).
   - Onde tem "as var1"(exemplo 1 e 2) significa que o valor retornado será armazenado numa variavel chamada var1(que pode ser checada num IF).
   - Onde NÃO tem "as var1"(exemplo 3) significa que o valor retornado será printado/MOSTRADO no html como se fosse um {{valor}}

######

if you are setting the variable as an integer and you want to increment it (for example), you need to use add: {% define counter|add:1 as counter %}
